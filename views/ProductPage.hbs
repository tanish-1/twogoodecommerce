   <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <!-- Bootstrap CSS -->
    <link rel="shortcut icon" href="https://twogood.com.au/favicon-32x32.png" type="image/x-icon">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/locomotive-scroll@3.5.4/dist/locomotive-scroll.css">
     <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />
        </head>
         <style>
          *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html, body{
    height: 100%;
    width: 100%;
}
body{
    background-color: #1D1F20;
    color: #F7F7F7;
}
*::selection{
    color: white;
    background-color: black;
}
#review-btn:hover{
    background-color: black;
    color: white;
}
#review-section{
    background-color: #1D1F20;
    color: #E8E6E3;
    position: absolute;
  width: 230px;
 text-align: center;
 height: 140px;
 justify-content: center;
}
 input[type=radio] {
      display: none;
      }
      label.radio {
      position: relative;
      display: inline-block;
      text-indent: 28px;
      cursor: pointer;
      }
        label.radio:before {
      content: "";
      position: absolute;
      top:4px;
      left: 0;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: #fff;
      }
       label.radio:after {
      content: "";
      position: absolute;
      width: 10px;
      height: 6px;
      top: 9px;
      left: 4px;
      border-bottom: 3px solid #1D1F20;
      border-left: 3px solid #1D1F20;
      transform: rotate(-45deg);
      opacity: 0;
      }
      input[type=radio]:checked + label:after {
      opacity: 1;
      }
#card-item{
    color: #F7F7F7;
    background-color: #1D1F20;
}
#cart-icon{
  cursor: pointer;
 color: #1D1F20;
}
.popup-cart {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  padding: 20px;
  border: 1px solid black;
  z-index: 999;
}

.popup-cart.show {
  display: block;
}

.cart-item {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.cart-item img {
  width: 50px;
  height: 50px;
  margin-right: 10px;
}
.cart-buttons {
  display: flex;
  justify-content: space-between;
}

.clear-cart-button,
.buy-now-button {
  padding: 10px 20px;
 
  /* color: #fff; */
  border: none;
  cursor: pointer;
}

.clear-cart-button:hover,
.buy-now-button:hover {
  background-color: #26292B;
  color: #F7F7F7;
}
#hometag{
    cursor: pointer;
}
.ri-menu-line{
    cursor: pointer;
    color: #1D1F20;
}
.fullscreen-menu {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000;
    z-index: 9999;
    color: white;
  }
  .fullscreen-menu ul a li:hover {
    text-decoration: underline;
}
  .fullscreen-menu ul a{
    text-decoration: none;
    color: #F7F7F7;
  }
  .fullscreen-menu ul {
    list-style: none;
    font-family: futura;
    font-size: 15.4vw;
    letter-spacing: -3px;
    text-align: center;
    text-transform:uppercase;
    line-height: 2.4vw;
    padding: 8em 0 0 2em;
    color: #F7F7F7;
    font-size: 42px;
  }
  /* #dropdown-menu a:hover {
    background-color: rgba(255, 255, 255, 0.1);
  } */
  .fullscreen-menu.active {
    display: block;
  }
  .close-btn {
    position: absolute;
    top: 20px;
    right: 20px;
    cursor: pointer;
  }
#nav{
    height: 100px;
    width: 100%;
    /* background-color: rgb(183, 154, 184); */
    position: fixed;
    z-index: 2;
    display: flex;
align-items: flex-start;
justify-content: space-between;
padding: 12px;

}
#nav-part1{
    /* background-color: red; */
    height: 83px;
    overflow: hidden;
}
#nav-part1 svg{
    display: block;
    color: #E8E6E3;
} 
#nav #nav-part2{
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 45px ;
}
#nav-part2 #links a{
    text-decoration: none;
    text-transform: uppercase;
    color: #E8E6E3;
    font-weight: 400;
    font-size: 14px;
    margin: 0 20px;
}
#icons{
    padding: 10px;
    border-radius:50px ;
    background-color:#E8E6E3;
}
#icons p{
    display: inline;
    position: absolute;
    top: 17px;
    right: 34px;
}
#nav-part2 #icons i{
    font-size: 18px;
    margin: 0 20px;
    font-weight: 100;
}
#page1{
    margin: auto;
    margin-top: 10px;
    width: 95%;
    height: 90vh;
    background-color: #26292B;
    padding: 20px;
    position: relative;
    justify-content: space-between;
}
#page5 {
    min-height: 100vh;
}

#page5 #footer{
    margin-top: 150px;
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
}

#footer #connect{
    display: flex;
    flex-direction: column;
    padding: 30px;
    gap: 5px;
    color: #E8E6E3;
}

#footer #connect p, #nitty p{
    margin-bottom: 18px;
    font-size: 14px;
    opacity: 0.5;
    color: #E8E6E3;
}

#footer #connect a, #nitty a{
    font-size: 17px;
    color:#E8E6E3;
    text-decoration: none;
    font-weight: 500;
}

#footer #logo{
    width: 70%;
    display: flex;
    flex-direction: column;
    align-items: center;
}

#footer #logo img {
    height: 270px;
    width: 270px;
    object-fit: cover;
    background-color: #1D1F20;
}

#footer #logo #copyright {
    margin-top: 90px;
    display: flex;
    justify-content: space-evenly;
}

#footer #logo #copyright a{
    padding: 0 20px;
    text-decoration: none;
    color:#E8E6E3;
    opacity: 0.5;
}

#footer #nitty{
    display: flex;
    flex-direction: column;
    padding: 30px;
    align-items: flex-end;
    gap: 5px;
}

#page5 #footer-info{
    width: 70%;
    margin: 0 auto;
    margin-top: 90px;
    text-align: center;
}

#page5 #footer-info p{
    font-size: 18px;
    line-height: 25px;
    color:#E8E6E3;
}
.chatbot-toggler {
    position: fixed;
    bottom: 30px;
    right: 35px;
    outline: none;
    border: none;
    height: 50px;
    width: 50px;
    display: flex;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background: #724ae8;
    transition: all 0.2s ease;
    z-index: 4;
  }
  body.show-chatbot .chatbot-toggler {
    transform: rotate(90deg);
  }
  .chatbot-toggler span {
    color: #fff;
    position: absolute;
  }
  .chatbot-toggler span:last-child,
  body.show-chatbot .chatbot-toggler span:first-child  {
    opacity: 0;
  }
  body.show-chatbot .chatbot-toggler span:last-child {
    opacity: 1;
  }
  .chatbot {
    position: fixed;
    right: 35px;
    bottom: 90px;
    width: 420px;
    background: #fff;
    border-radius: 15px;
    overflow: hidden;
    opacity: 0;
    pointer-events: none;
    transform: scale(0.5);
    transform-origin: bottom right;
    box-shadow: 0 0 128px 0 rgba(0,0,0,0.1),
                0 32px 64px -48px rgba(0,0,0,0.5);
    transition: all 0.1s ease;
    z-index: 4;
  }
  body.show-chatbot .chatbot {
    opacity: 1;
    pointer-events: auto;
    transform: scale(1);
  }
  .chatbot header {
    padding: 16px 0;
    position: relative;
    text-align: center;
    color: #fff;
    background: #1D1F20;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }
  .chatbot header span {
    position: absolute;
    right: 15px;
    top: 50%;
    display: none;
    cursor: pointer;
    transform: translateY(-50%);
  }
  header h2 {
    font-size: 1.4rem;
  }
  .chatbot .chatbox {
    overflow-y: auto;
    height: 510px;
    padding: 30px 20px 100px;
  }
  .chatbot :where(.chatbox, textarea)::-webkit-scrollbar {
    width: 6px;
  }
  .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-track {
    background: #fff;
    border-radius: 25px;
  }
  .chatbot :where(.chatbox, textarea)::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 25px;
  }
  .chatbox .chat {
    display: flex;
    list-style: none;
  }
  .chatbox .outgoing {
    margin: 20px 0;
    justify-content: flex-end;
  }
  .chatbox .incoming span {
    width: 32px;
    height: 32px;
    color: #fff;
    cursor: default;
    text-align: center;
    line-height: 32px;
    align-self: flex-end;
    background: #724ae8;
    border-radius: 4px;
    margin: 0 10px 7px 0;
  }
  .chatbox .chat p {
    white-space: pre-wrap;
    padding: 12px 16px;
    border-radius: 10px 10px 0 10px;
    max-width: 75%;
    color: #fff;
    font-size: 0.95rem;
    background: #1D1F20;
  }
  .chatbox .incoming p {
    border-radius: 10px 10px 10px 0;
  }
  .chatbox .chat p.error {
    color: #721c24;
    background: #f8d7da;
  }
  .chatbox .incoming p {
    color: #000;
    background: #f2f2f2;
  }
  .chatbot .chat-input {
    display: flex;
    gap: 5px;
    position: absolute;
    bottom: 0;
    width: 100%;
    background: #fff;
    padding: 3px 20px;
    border-top: 1px solid #ddd;
  }
  .chat-input textarea {
    height: 55px;
    width: 100%;
    border: none;
    outline: none;
    resize: none;
    max-height: 180px;
    padding: 15px 15px 15px 0;
    font-size: 0.95rem;
  }
  .chat-input span {
    align-self: flex-end;
    color: #724ae8;
    cursor: pointer;
    height: 55px;
    display: flex;
    align-items: center;
    visibility: hidden;
    font-size: 1.35rem;
  }
  .chat-input textarea:valid ~ span {
    visibility: visible;
  }
         </style>
<body>
     <!-- chatbot -->
      <button class="chatbot-toggler">
        <span class="material-symbols-rounded">mode_comment</span>
        <span class="material-symbols-outlined">close</span>
      </button>
      <div class="chatbot">
        <header>
          <h2>Chatbot</h2>
          <span class="close-btn material-symbols-outlined">close</span>
        </header>
        <ul class="chatbox">
          <li class="chat incoming">
            <span class="material-symbols-outlined">smart_toy</span>
            <p>Hi there 👋<br>How can I help you today?</p>
          </li>
        </ul>
        <div class="chat-input">
          <textarea placeholder="Enter a message..." spellcheck="false" required></textarea>
          <span id="send-btn" class="material-symbols-rounded">send</span>
        </div>
      </div>
  <div id="nav">
      <a href="/">
        <div id="nav-part1">
            <svg id="twogoodlogo"width="62" height="63" viewBox="0 0 62 63" fill="none" xmlns="http://www.w3.org/2000/svg" class="go1438215768" style="transform: translate(0px, 0px);">
                <path d="M46.8316 0C42.9105 0 39.1501 1.59236 36.3775 4.42677C33.605 7.26119 32.0474 11.1055 32.0474 15.114C32.0474 19.1224 33.605 22.9667 36.3775 25.8011C39.1501 28.6355 42.9105 30.2279 46.8316 30.2279C50.7526 30.2279 54.513 28.6355 57.2856 25.8011C60.0582 22.9667 61.6158 19.1224 61.6158 15.114C61.6158 11.1055 60.0582 7.26119 57.2856 4.42677C54.513 1.59236 50.7526 0 46.8316 0Z" fill="currentColor"></path><path d="M14.793 0C10.872 0 7.11154 1.59236 4.33897 4.42677C1.56639 7.26119 0.00878906 11.1055 0.00878906 15.114C0.00878906 19.1224 1.56639 22.9667 4.33897 25.8011C7.11154 28.6355 10.872 30.2279 14.793 30.2279C18.714 30.2279 22.4744 28.6355 25.247 25.8011C28.0196 22.9667 29.5772 19.1224 29.5772 15.114C29.5772 11.1055 28.0196 7.26119 25.247 4.42677C22.4744 1.59236 18.714 0 14.793 0Z" fill="currentColor"></path><path d="M36.9805 32.7422L32.0366 37.7963L56.6819 62.9913L61.6258 57.9372L36.9805 32.7422Z" fill="currentColor"></path><path d="M56.6836 32.7485L32.0383 57.9435L36.9822 62.9976L61.6275 37.8026L56.6836 32.7485Z" fill="currentColor"></path><path d="M4.94386 32.7464L0 37.8005L24.6453 62.9955L29.5892 57.9414L4.94386 32.7464Z" fill="currentColor"></path><path d="M24.647 32.7527L0.00170898 57.9477L4.94557 63.0018L29.5909 37.8068L24.647 32.7527Z" fill="currentColor"></path>
            </svg>
        </div>
         </a>
              <div id="nav-part2">
            <div id="links">
                <a href="/api/products/type/shop">Shop</a>
                <a href="#">About</a>
                <a href="#">Support</a>
            </div>
            <div id="icons">
                <div class="fullscreen-menu" id="fullscreenMenu">
                    <div class="close-btn" onclick="closeFullscreenMenu()">X</div>
                    <!-- Your dropdown menu content here -->
                    <ul>
                      <a href="/"><li>Home</li></a>
                     <a href=""> <li>About</li></a>
                     <a href=""> <li>Contact</li></a>
                      <li id="signin"><a href="/login">Sign In</a></li>
                    <li id="signin"><a href="/signup">Sign Up</a></li>
                    </ul>
                  </div>
                  
                  <i class="ri-menu-line" onclick="openFullscreenMenu()" id="menu-line"></i>
                   <a href="/cart"  id="shop-l">
               <span id="cart"> <i class="ri-shopping-cart-2-line" id="cart-icon"></i></span>
               </a>
            </div>
    </div>
  </div>
   <div id="main">
<div id="page1">
<div class="d-flex justify-content-around mt-4">
    <div class="card" style="width: 18rem;" id="card-item">
        <img src="{{product.image}}" class="card-img-top" alt="{{product.title}}">
        <div class="card-body">
            <h5 class="card-title">{{product.title}}</h5>
            <h5 class="card-title">Rs. {{product.price}}</h5>
            <form action="/add-to-cart/{{product._id}}" method="post">
                <button class="btn btn-primary" style="background-color:#F7F7F7; color: #26292B; border:#F7F7F7">Add to cart</button>
            </form>
        </div>
    </div>

    <div>
        <div class="mt-4">
            <h2>Add Review :</h2>
            <form action="/product/{{product._id}}/addreview" method="get" id="reviewForm">
                <div class="form-group">
                    <label for="rating"></label>
                    <fieldset class="starability-basic">
                        <input type="radio" id="no-rate" class="input-no-rate" name="rating" value="0" checked aria-label="No rating." />
                        <div>
                        <input type="radio" id="first-rate1" name="rating" value="1" />
                        <label for="first-rate1" title="Terrible" class="radio">1 star</label>
                        </div>

                        <div>
                        <input type="radio" id="first-rate2" name="rating" value="2" />
                        <label for="first-rate2" title="Not good" class="radio">2 stars</label>
                        </div>

                        <div>
                        <input type="radio" id="first-rate3" name="rating" value="3" />
                        <label for="first-rate3" title="Average" class="radio">3 stars</label>
                        </div>
                         
                         <div>
                        <input type="radio" id="first-rate4" name="rating" value="4" />
                        <label for="first-rate4" title="Very good" class="radio">4 stars</label>
                        </div>
                        <div>
                        <input type="radio" id="first-rate5" name="rating" value="5" />
                        <label for="first-rate5" title="Amazing" class="radio">5 stars</label>
                        </div>
                    </fieldset>
                </div>
                <div class="form-group">
                    <label for="comment">Comment:</label>
                    <input type="text" name="comment" class="form-control">
                </div>
                <button id="review-btn" type="submit" class="btn btn-primary" style="background-color:#F7F7F7; color: #26292B; border:#F7F7F7;">Submit</button>
            </form>
        </div>

        <div class="mt-4">
            <h2>Reviews</h2>
            {{#if product.reviews.length}}
                {{#each product.reviews}}
                <div class="card mt-2" id="review-section">
                    <p class="starability-result" data-rating="{{this.rating}}">
                        Rated: {{this.rating}} stars
                    </p>
                    <p>{{this.comment}}</p>
                </div>
                {{/each}}
            {{else}}
                <p>No reviews yet</p>
            {{/if}}
        </div>
    </div>
   
</div>
</div>
<div id="page5">
            <div id="footer">
                <div id="connect">
                    <p>CONNECT WITH US</p>
                    <a href="#">Facebook</a>
                    <a href="#">Instagram</a>
                    <a href="#">Twitter</a>
                    <a href="#">LinkedIn</a>
                    <a href="#">YouTube</a>
                </div>
                <div id="logo">
                    <img src="https://th.bing.com/th/id/OIP.PWrFYlP_zrS5x0P3O5JbCgAAAA?w=300&h=193&rs=1&pid=ImgDetMain" alt="">
                    <div id="copyright">
                        <a href="#">&copy; TWO GOOD CO. 2024</a>
                        <a href="#">TERMS OF USE</a>
                        <a href="#">PRIVACY POLICY</a>
                    </div>
                </div>
                <div id="nitty">
                    <p>THE NITTY GRITTIES</p>
                    <a href="#">Good Things FAQs</a>
                    <a href="#">Good Food FAQs</a>
                    <a href="#">Good Places</a>
                    <a href="#">Pathways</a>
                    <a href="#">Careers</a>
                </div>
            </div>
            <div id="footer-info">
                <p>We are proud and privileged to have our home on this land, and to be able to continue the long
                    tradition of community coming together around food, begun thousands of years ago by First Nations
                    peoples. As we stand together on this unceded land, we acknowledge our First Nations people, are the
                    original custodians of this land, and we recognise their deep connection to land, water, sky and
                    community which continues today. We pay our deep respects to community elders, past, present and
                    emerging, for they hold the memories, the traditions, the culture and hopes of Aboriginal and Torres
                    Strait Islander peoples. Always was, always will be Aboriginal land.</p>

            </div>
        </div>
     
</div>
    <!-- Bootstrap JS and jQuery (optional) -->
    <script>
const menuIcon = document.querySelector(".ri-menu-line");
const dropdownMenu = document.getElementById("fullscreenMenu");
// const menuItems = document.querySelectorAll("#menuItems li");

function openFullscreenMenu() {
  // Show the dropdown menu
  dropdownMenu.style.display = "block";

  // Animate menu items
  gsap.from("#fullscreenMenu ul li", {
    opacity: 0,
    y: -80,
    duration: 0.5,
    stagger: 0.2,
    scrollTrigger:{
        trigger:"menuIcon",
        scroller:"dropdownMenu",
    }
  });
}

function closeFullscreenMenu() {
  // Hide the dropdown menu
  dropdownMenu.style.display = "none";
}

     </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/locomotive-scroll@3.5.4/dist/locomotive-scroll.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js" integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js" integrity="sha512-onMTRKJBKz8M1TnqqDuGBlowlH0ohFzMXYRNebz+yOcc5TQr/zAKsthzhuv0hiyUKEiQEQXEynnXCvNTOk50dg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
     <script>
      function locomotiveAnimation(){
    gsap.registerPlugin(ScrollTrigger);

    // Using Locomotive Scroll from Locomotive https://github.com/locomotivemtl/locomotive-scroll
    
    const locoScroll = new LocomotiveScroll({
      el: document.querySelector("#main"),
      smooth: true
    });
    // each time Locomotive Scroll updates, tell ScrollTrigger to update too (sync positioning)
    locoScroll.on("scroll", ScrollTrigger.update);
    
    // tell ScrollTrigger to use these proxy methods for the "#main" element since Locomotive Scroll is hijacking things
    ScrollTrigger.scrollerProxy("#main", {
      scrollTop(value) {
        return arguments.length ? locoScroll.scrollTo(value, 0, 0) : locoScroll.scroll.instance.scroll.y;
      }, // we don't have to define a scrollLeft because we're only scrolling vertically.
      getBoundingClientRect() {
        return {top: 0, left: 0, width: window.innerWidth, height: window.innerHeight};
      },
      // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).
      pinType: document.querySelector("#main").style.transform ? "transform" : "fixed"
    });
    
    
     
    
    
    // each time the window updates, we should refresh ScrollTrigger and then update LocomotiveScroll. 
    ScrollTrigger.addEventListener("refresh", () => locoScroll.update());
    
    // after everything is set up, refresh() ScrollTrigger and update LocomotiveScroll because padding may have been added for pinning, etc.
    ScrollTrigger.refresh();
    
}
locomotiveAnimation()


function navbarAnimation(){
    gsap.to("#nav-part1 svg",{
        transform :"translatey(-100%",
        scrollTrigger:{
            trigger:"#page1",
            scroller:"#main",
            start:"top 0",
            end:"top -5%",
            scrub:true
        }
    })
    gsap.to("#nav-part2 #links",{
        transform :"translatey(-100%",
        opacity:0,
        scrollTrigger:{
            trigger:"#page1",
            scroller:"#main",
            start:"top 0",
            end:"top -5%",
            scrub:true
        }
    })
}
navbarAnimation()

function cursoranimation(){
    document.addEventListener("mousemove",function(dets){
        gsap.to(".cursor",{
            left:dets.x,
            top:dets.y
        })
    })
    
    document.querySelectorAll(".child").forEach(function(elem){
        elem.addEventListener("mouseenter",function(){
            gsap.to(".cursor",{
                transform: 'translate(-50%,-50%) scale(1)',
            })
        })
        elem.addEventListener("mouseleave",function(){
            gsap.to(".cursor",{
                transform: 'translate(-50%,-50%) scale(0)',
            })
        })
     })
    
}
cursoranimation()



    </script>
    <script>
      const chatbotToggler = document.querySelector(".chatbot-toggler");
const closeBtn = document.querySelector(".close-btn");
const chatbox = document.querySelector(".chatbox");
const chatInput = document.querySelector(".chat-input textarea");
const sendChatBtn = document.querySelector(".chat-input span");

let userMessage = null; // Variable to store user's message
const API_KEY = ""; // Paste your API key here
const inputInitHeight = chatInput.scrollHeight;

const createChatLi = (message, className) => {
    // Create a chat <li> element with passed message and className
    const chatLi = document.createElement("li");
    chatLi.classList.add("chat", `${className}`);
    let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
    chatLi.innerHTML = chatContent;
    chatLi.querySelector("p").textContent = message;
    return chatLi; // return chat <li> element
}

const generateResponse = (chatElement) => {
    const API_URL = "https://api.openai.com/v1/chat/completions";
    const messageElement = chatElement.querySelector("p");

    // Define the properties and message for the API request
    const requestOptions = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{role: "user", content: userMessage}],
        })
    }

    // Send POST request to API, get response and set the reponse as paragraph text
    fetch(API_URL, requestOptions).then(res => res.json()).then(data => {
        messageElement.textContent = data.choices[0].message.content.trim();
    }).catch(() => {
        messageElement.classList.add("error");
        messageElement.textContent = "Oops! Something went wrong. Please try again.";
    }).finally(() => chatbox.scrollTo(0, chatbox.scrollHeight));
}

const handleChat = () => {
    userMessage = chatInput.value.trim(); // Get user entered message and remove extra whitespace
    if(!userMessage) return;

    // Clear the input textarea and set its height to default
    chatInput.value = "";
    chatInput.style.height = `${inputInitHeight}px`;

    // Append the user's message to the chatbox
    chatbox.appendChild(createChatLi(userMessage, "outgoing"));
    chatbox.scrollTo(0, chatbox.scrollHeight);
    
    setTimeout(() => {
        // Display "Thinking..." message while waiting for the response
        const incomingChatLi = createChatLi("Thinking...", "incoming");
        chatbox.appendChild(incomingChatLi);
        chatbox.scrollTo(0, chatbox.scrollHeight);
        generateResponse(incomingChatLi);
    }, 600);
}

chatInput.addEventListener("input", () => {
    // Adjust the height of the input textarea based on its content
    chatInput.style.height = `${inputInitHeight}px`;
    chatInput.style.height = `${chatInput.scrollHeight}px`;
});

chatInput.addEventListener("keydown", (e) => {
    // If Enter key is pressed without Shift key and the window 
    // width is greater than 800px, handle the chat
    if(e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        handleChat();
    }
});

sendChatBtn.addEventListener("click", handleChat);
closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
    </script>
</body>
</html>